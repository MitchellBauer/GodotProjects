To make the ScoreBoxes behave like a choice box, you can use a group to manage their selection state. You can create a singleton or use the existing Gameplay script to manage the selected ScoreBox. In this example, I'll use the Gameplay script.

Add a variable in your Gameplay script to store the currently selected ScoreBox:
gdscript
Copy code
var selected_scorebox = null
Create a function in Gameplay to handle the ScoreBox selection:
gdscript
Copy code
func set_selected_scorebox(scorebox):
	if selected_scorebox:
		selected_scorebox.deselect()
	selected_scorebox = scorebox
In your ScoreBox script, call this function when it's selected:
gdscript
Copy code
func _on_pressed():
	if not selected:
		selected = true
		gameplay.set_selected_scorebox(self)
	else:
		selected = false
		gameplay.set_selected_scorebox(null)
	update()
Modify the is_selected() function in the ScoreBox script to return the state of the current ScoreBox:
gdscript
Copy code
func is_selected():
	return selected
Update the _on_pressed() function in the PlayButton script to check if a ScoreBox is selected using the selected_scorebox variable:
gdscript
Copy code
func _on_pressed():
	if gameplay.selected_scorebox:
		# Calculate the score for the current turn
		var score = gameplay.calculate_score_for_turn()
		gameplay.end_turn(score)
	else:
		# Show the warning dialog
		var warning_dialog = get_node("../../NoSelectionWarningDialog")
		warning_dialog.popup_centered()
Now, when you select a ScoreBox, it will automatically deselect any previously selected ScoreBox, ensuring that only one can be selected at a time.